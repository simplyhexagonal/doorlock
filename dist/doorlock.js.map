{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import {\n  DoorLockEntity,\n  DoorLockOptions,\n  DoorLockPermission,\n  DoorLockRestriction,\n  DoorLockRole,\n  DoorLockUser,\n} from './interfaces';\n\nexport * from './interfaces';\n\n// @ts-ignore\nimport { version } from '../package.json';\n\ninterface DoorLockLogOptions {\n  logFn: DoorLockOptions['logFn'];\n  userId: string;\n  wasAllowed: boolean;\n  resourceName?: string;\n  resourceIdentifier?: string;\n  reason: string;\n}\n\ninterface DoorLockEvaluationOptions {\n  roleHandles: DoorLockRole['handle'][];\n  permissionHandles: DoorLockPermission['handle'][];\n  restrictionHandles: DoorLockRestriction['handle'][];\n  resourceName?: string;\n  resourceIdentifier?: string;\n}\n\nclass DoorLock {\n  static version = version;\n\n  superAdminId: string;\n  fetchRolesById: DoorLockOptions['fetchRolesById'];\n  fetchPermissionsById: DoorLockOptions['fetchPermissionsById'];\n  fetchRestrictionsById: DoorLockOptions['fetchRestrictionsById'];\n  fetchRolesByHandle: DoorLockOptions['fetchRolesByHandle'];\n  fetchPermissionsByHandle: DoorLockOptions['fetchPermissionsByHandle'];\n  fetchRestrictionsByHandle: DoorLockOptions['fetchPermissionsByHandle'];\n  verifyRoleExists: boolean = false;\n  verifyAbilitiesExist: boolean = false;\n  debug: boolean = false;\n  logFn: DoorLockOptions['logFn'];\n\n  constructor({\n    superAdminId,\n    fetchRolesById,\n    fetchPermissionsById,\n    fetchRestrictionsById,\n    fetchRolesByHandle,\n    fetchPermissionsByHandle,\n    fetchRestrictionsByHandle,\n    verifyRoleExists,\n    verifyAbilitiesExist,\n    debug,\n    logFn = console.log,\n  }: DoorLockOptions) {\n    this.superAdminId = superAdminId;\n    this.fetchRolesById = fetchRolesById;\n    this.fetchPermissionsById = fetchPermissionsById;\n    this.fetchRestrictionsById = fetchRestrictionsById;\n    this.fetchRolesByHandle = fetchRolesByHandle;\n    this.fetchPermissionsByHandle = fetchPermissionsByHandle;\n    this.fetchRestrictionsByHandle = fetchRestrictionsByHandle;\n    this.verifyRoleExists = verifyRoleExists || this.verifyRoleExists;\n    this.verifyAbilitiesExist = verifyAbilitiesExist || this.verifyAbilitiesExist;\n    this.debug = Boolean(debug);\n    this.logFn = logFn;\n\n    console.log(`DoorLock initiated with options:`, {\n      superAdminId: this.superAdminId,\n      fetchRolesById: this.fetchRolesById,\n      fetchPermissionsById: this.fetchPermissionsById,\n      fetchRestrictionsById: this.fetchRestrictionsById,\n      fetchRolesByHandle: this.fetchRolesByHandle,\n      fetchPermissionsByHandle: this.fetchPermissionsByHandle,\n      fetchRestrictionsByHandle: this.fetchRestrictionsByHandle,\n      verifyRoleExists: this.verifyRoleExists,\n      verifyAbilitiesExist: this.verifyAbilitiesExist,\n      debug: this.debug,\n      logFn: logFn,\n    });\n  }\n\n  checkSuperAdmin = ({id}: DoorLockUser): boolean => {\n    if (this.superAdminId && id === this.superAdminId) {\n      return true;\n    }\n\n    return false;\n  };\n\n  logAbilityEvaluation = ({\n    logFn,\n    userId,\n    wasAllowed,\n    resourceName,\n    resourceIdentifier,\n    reason,\n  }: DoorLockLogOptions): void => {\n    if (this.debug) {\n      let message = `user ${userId} was ${wasAllowed ? 'allowed' : 'not allowed'} access`;\n      message += (\n        resourceName || resourceIdentifier\n      ) ? (\n        ` to ${resourceName ? `${resourceName}`: ''} ${resourceIdentifier ? `${resourceIdentifier}`: ''}`\n      ) : (\n        ''\n      );\n      message += (reason) ? ` due to: ${reason}` : '';\n\n      logFn(message);\n    }\n  };\n\n  verifyEntityExistence = async <T extends DoorLockEntity>({\n    userId,\n    entityHandles,\n    entityIds,\n    entityName,\n    resourceName,\n    resourceIdentifier,\n    fetchByIdsFn,\n    fetchByHandlesFn,\n  }: {\n    userId: DoorLockUser['id'];\n    entityIds: DoorLockEntity['id'][];\n    entityHandles: DoorLockEntity['handle'][];\n    entityName: string;\n    resourceName?: string;\n    resourceIdentifier?: string;\n    fetchByIdsFn: (entityIds: DoorLockEntity['id'][]) => Promise<T[]>;\n    fetchByHandlesFn: (entityHandles: DoorLockEntity['handle'][]) => Promise<T[]>;\n  }): Promise<{userEntities: T[]; appEntities: T[];}> => {\n    const existingEntities: DoorLockEntity[] = [];\n\n    const userEntities = await fetchByIdsFn(entityIds);\n    const appEntities = await fetchByHandlesFn(entityHandles);\n\n    userEntities.forEach((e) => existingEntities.push(e));\n    appEntities.forEach((e) => existingEntities.push(e));\n\n    if (existingEntities.length !== (entityIds.length + entityHandles.length)) {\n      const missingEntities: string[] = [];\n\n      entityIds.forEach((i) => {\n        const me = existingEntities.find((e) => e.id === i);\n\n        if (!me) {\n          missingEntities.push(i);\n        }\n      });\n\n      entityHandles.forEach((h) => {\n        const me = existingEntities.find((e) => e.handle === h);\n\n        if (!me) {\n          missingEntities.push(h);\n        }\n      });\n\n      const reason = (\n        missingEntities.length === 0\n      ) ? (\n        `${entityName} count does not match, this means there are duplicate ${entityName}s either on the user record or the resource definition, cowardly refusing to continue`\n      ) : (\n        `non-existing ${entityName}(s) (${missingEntities.join()})`\n      );\n\n      this.logAbilityEvaluation({\n        logFn: this.logFn,\n        userId,\n        wasAllowed: false,\n        resourceName,\n        resourceIdentifier,\n        reason,\n      });\n\n      throw new Error(reason);\n    }\n\n    return {\n      userEntities,\n      appEntities,\n    };\n  };\n\n  evaluateAbilities = async (\n    user: DoorLockUser,\n    {\n      roleHandles,\n      permissionHandles,\n      restrictionHandles,\n      resourceName,\n      resourceIdentifier,\n    }: DoorLockEvaluationOptions,\n  ): Promise<boolean | never> => {\n    if (this.checkSuperAdmin(user)) {\n      this.logAbilityEvaluation({\n        logFn: this.logFn,\n        userId: user.id,\n        wasAllowed: true,\n        resourceName,\n        resourceIdentifier,\n        reason: 'is super admin',\n      });\n\n      return true;\n    }\n\n    if (roleHandles.length + permissionHandles.length + restrictionHandles.length < 1) {\n      this.logAbilityEvaluation({\n        logFn: this.logFn,\n        userId: user.id,\n        wasAllowed: false,\n        resourceName,\n        resourceIdentifier,\n        reason: 'only super admin allowed',\n      });\n\n      throw new Error('Unauthorized');\n    }\n\n    const {\n      id,\n      roles,\n      abilities: {\n        permissions,\n        restrictions,\n      },\n    } = user;\n\n    let userRoles: DoorLockRole[];\n    let userPermissions: DoorLockPermission[];\n    let userRestrictions: DoorLockRestriction[];\n\n    let appRoles: DoorLockRole[];\n    let appPermissions: DoorLockPermission[];\n    let appRestrictions: DoorLockRestriction[];\n\n    if (this.verifyRoleExists) {\n      const result = await this.verifyEntityExistence({\n        userId: id,\n        entityIds: roles,\n        entityHandles: roleHandles,\n        entityName: 'role',\n        resourceName,\n        resourceIdentifier,\n        fetchByIdsFn: this.fetchRolesById,\n        fetchByHandlesFn: this.fetchRolesByHandle,\n      });\n\n      userRoles = result['userEntities'];\n      appRoles = result['appEntities'];\n    } else {\n      userRoles = await this.fetchRolesById(roles);\n      appRoles = await this.fetchRolesByHandle(roleHandles);\n    }\n\n    if (this.verifyAbilitiesExist) {\n      const resultP = await this.verifyEntityExistence({\n        userId: id,\n        entityIds: permissions,\n        entityHandles: permissionHandles,\n        entityName: 'permission',\n        resourceName,\n        resourceIdentifier,\n        fetchByIdsFn: this.fetchPermissionsById,\n        fetchByHandlesFn: this.fetchPermissionsByHandle,\n      });\n\n      userPermissions = resultP['userEntities'];\n      appPermissions = resultP['appEntities'];\n\n      const resultR = await this.verifyEntityExistence({\n        userId: id,\n        entityIds: restrictions,\n        entityHandles: restrictionHandles,\n        entityName: 'restriction',\n        resourceName,\n        resourceIdentifier,\n        fetchByIdsFn: this.fetchRestrictionsById,\n        fetchByHandlesFn: this.fetchRestrictionsByHandle,\n      });\n\n      userRestrictions = resultR['userEntities'];\n      appRestrictions = resultR['appEntities'];\n    } else {\n      userPermissions = await this.fetchPermissionsById(permissions);\n      userRestrictions = await this.fetchRestrictionsById(restrictions);\n\n      appPermissions = await this.fetchPermissionsByHandle(permissionHandles);\n      appRestrictions = await this.fetchRestrictionsByHandle(restrictionHandles);\n    }\n\n    if (userRoles.length + userPermissions.length < 1) {\n      this.logAbilityEvaluation({\n        logFn: this.logFn,\n        userId: user.id,\n        wasAllowed: false,\n        resourceName,\n        resourceIdentifier,\n        reason: 'user has no permissions whatsoever',\n      });\n\n      throw new Error('Unauthorized');\n    }\n\n    const isPermittedByRole = userRoles.reduce(\n      (a, b) => (\n        a \n        || (typeof appRoles.find((r) => b.id === r.id) !== 'undefined')\n        || b.abilities.permissions.reduce(\n          (j, i) => j || (typeof appPermissions.find((p) => i === p.id) !== 'undefined'),\n          false,\n        )\n      ),\n      false,\n    );\n\n    const isPermittedByPermissions = userPermissions.reduce(\n      (a, b) => a || (typeof appPermissions.find((r) => b.id === r.id) !== 'undefined'),\n      false,\n    );\n\n    const isNotRestricted = userRestrictions.reduce(\n      (a, b) => a && !appRestrictions.includes(b),\n      true,\n    );\n\n    if ((isPermittedByRole || isPermittedByPermissions) && isNotRestricted) {\n      this.logAbilityEvaluation({\n        logFn: this.logFn,\n        userId: user.id,\n        wasAllowed: true,\n        resourceName,\n        resourceIdentifier,\n        reason: 'user has the proper permissions and no restrictions',\n      });\n\n      return true;\n    }\n\n    this.logAbilityEvaluation({\n      logFn: this.logFn,\n      userId: user.id,\n      wasAllowed: false,\n      resourceName,\n      resourceIdentifier,\n      reason: 'non of the user permissions match resource requirements',\n    });\n\n    throw new Error('Unauthorized');\n  };\n}\n\nexport default DoorLock;\n"],
  "mappings": "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",
  "names": []
}
