var Doorlock=(()=>{var R=Object.defineProperty;var w=g=>R(g,"__esModule",{value:!0});var A=(g,e)=>{w(g);for(var t in e)R(g,t,{get:e[t],enumerable:!0})};var F={};A(F,{default:()=>H});var I="2.0.0";var D=class{constructor({superAdminId:e,fetchRolesById:t,fetchPermissionsById:o,fetchRestrictionsById:n,fetchRolesByHandle:s,fetchPermissionsByHandle:i,fetchRestrictionsByHandle:y,verifyRoleExists:u,verifyAbilitiesExist:l,debug:f,logFn:a}){this.verifyRoleExists=!1;this.verifyAbilitiesExist=!1;this.debug=!1;this.logFn=console.log;this.checkSuperAdmin=({userId:e})=>!!(this.superAdminId&&e===this.superAdminId);this.logAbilityEvaluation=({userId:e,wasAllowed:t,resourceName:o,resourceIdentifier:n,reason:s})=>{if(this.debug){let i=`user ${e} was ${t?"allowed":"not allowed"} access`;i+=o||n?` to ${o?`${o}`:""} ${n?`${n}`:""}`:"",i+=s?` due to: ${s}`:"",this.logFn(i)}};this.verifyEntityExistence=async({userId:e,entityHandles:t,entityIds:o,entityName:n,resourceName:s,resourceIdentifier:i,fetchByIdsFn:y,fetchByHandlesFn:u})=>{let l=[],f=await y(o),a=await u(t);if(f.forEach(r=>l.push(r)),a.forEach(r=>l.push(r)),l.length!==o.length+t.length){let r=[];o.forEach(d=>{l.find(p=>p.entityId===d)||r.push(d)}),t.forEach(d=>{l.find(p=>p.handle===d)||r.push(d)});let m=r.length===0?`${n} count does not match, this means there are duplicate ${n}s either on the user record or the resource definition, cowardly refusing to continue`:`non-existing ${n}(s) (${r.join()})`;throw this.logAbilityEvaluation({userId:e,wasAllowed:!1,resourceName:s,resourceIdentifier:i,reason:m}),new Error(m)}return{userEntities:f,appEntities:a}};this.evaluateAbilities=async(e,{roleHandles:t,permissionHandles:o,restrictionHandles:n,resourceName:s,resourceIdentifier:i})=>{if(this.checkSuperAdmin(e))return this.logAbilityEvaluation({userId:e.userId,wasAllowed:!0,resourceName:s,resourceIdentifier:i,reason:"is super admin"}),!0;if(t.length+o.length+n.length<1)throw this.logAbilityEvaluation({userId:e.userId,wasAllowed:!1,resourceName:s,resourceIdentifier:i,reason:"only super admin allowed"}),new Error("Unauthorized");let{userId:y,roles:u,abilities:{permissions:l,restrictions:f}}=e,a,r,m,d,k,p;if(this.verifyRoleExists){let c=await this.verifyEntityExistence({userId:y,entityIds:u,entityHandles:t,entityName:"role",resourceName:s,resourceIdentifier:i,fetchByIdsFn:this.fetchRolesById,fetchByHandlesFn:this.fetchRolesByHandle});a=c.userEntities,d=c.appEntities}else a=await this.fetchRolesById(u),d=await this.fetchRolesByHandle(t);if(this.verifyAbilitiesExist){let c=await this.verifyEntityExistence({userId:y,entityIds:l,entityHandles:o,entityName:"permission",resourceName:s,resourceIdentifier:i,fetchByIdsFn:this.fetchPermissionsById,fetchByHandlesFn:this.fetchPermissionsByHandle});r=c.userEntities,k=c.appEntities;let h=await this.verifyEntityExistence({userId:y,entityIds:f,entityHandles:n,entityName:"restriction",resourceName:s,resourceIdentifier:i,fetchByIdsFn:this.fetchRestrictionsById,fetchByHandlesFn:this.fetchRestrictionsByHandle});m=h.userEntities,p=h.appEntities}else r=await this.fetchPermissionsById(l),m=await this.fetchRestrictionsById(f),k=await this.fetchPermissionsByHandle(o),p=await this.fetchRestrictionsByHandle(n);if(a.length+r.length<1)throw this.logAbilityEvaluation({userId:e.userId,wasAllowed:!1,resourceName:s,resourceIdentifier:i,reason:"user has no permissions whatsoever"}),new Error("Unauthorized");let E=a.reduce((c,h)=>c||typeof d.find(L=>h.entityId===L.entityId)!="undefined"||h.abilities.permissions.reduce((L,b)=>L||typeof k.find(v=>b===v.entityId)!="undefined",!1),!1),B=r.reduce((c,h)=>c||typeof k.find(L=>h.entityId===L.entityId)!="undefined",!1),P=m.reduce((c,h)=>c&&!p.includes(h),!0);if((E||B)&&P)return this.logAbilityEvaluation({userId:e.userId,wasAllowed:!0,resourceName:s,resourceIdentifier:i,reason:"user has the proper permissions and no restrictions"}),!0;throw this.logAbilityEvaluation({userId:e.userId,wasAllowed:!1,resourceName:s,resourceIdentifier:i,reason:"non of the user permissions match resource requirements"}),new Error("Unauthorized")};this.superAdminId=e,this.fetchRolesById=t,this.fetchPermissionsById=o,this.fetchRestrictionsById=n,this.fetchRolesByHandle=s,this.fetchPermissionsByHandle=i,this.fetchRestrictionsByHandle=y,this.verifyRoleExists=u||this.verifyRoleExists,this.verifyAbilitiesExist=l||this.verifyAbilitiesExist,this.debug=Boolean(f),this.logFn=a||this.logFn,console.log("DoorLock initiated with options:",{superAdminId:this.superAdminId,fetchRolesById:this.fetchRolesById,fetchPermissionsById:this.fetchPermissionsById,fetchRestrictionsById:this.fetchRestrictionsById,fetchRolesByHandle:this.fetchRolesByHandle,fetchPermissionsByHandle:this.fetchPermissionsByHandle,fetchRestrictionsByHandle:this.fetchRestrictionsByHandle,verifyRoleExists:this.verifyRoleExists,verifyAbilitiesExist:this.verifyAbilitiesExist,debug:this.debug,logFn:a})}};D.version=I;var H=D;return F;})();
'undefined'!=typeof module&&(module.exports=Doorlock.default),'undefined'!=typeof window&&(Doorlock=Doorlock.default);