var Doorlock=(()=>{var R=Object.defineProperty;var w=k=>R(k,"__esModule",{value:!0});var A=(k,e)=>{w(k);for(var s in e)R(k,s,{get:e[s],enumerable:!0})};var F={};A(F,{default:()=>H});var E="1.1.2";var D=class{constructor({superAdminId:e,fetchRolesById:s,fetchPermissionsById:r,fetchRestrictionsById:t,fetchRolesByHandle:i,fetchPermissionsByHandle:o,fetchRestrictionsByHandle:c,verifyRoleExists:u,verifyAbilitiesExist:a,debug:y,logFn:d=console.log}){this.verifyRoleExists=!1;this.verifyAbilitiesExist=!1;this.debug=!1;this.checkSuperAdmin=({id:e})=>!!(this.superAdminId&&e===this.superAdminId);this.logAbilityEvaluation=({logFn:e,userId:s,wasAllowed:r,resourceName:t,resourceIdentifier:i,reason:o})=>{if(this.debug){let c=`user ${s} was ${r?"allowed":"not allowed"} access`;c+=t||i?` to ${t?`${t}`:""} ${i?`${i}`:""}`:"",c+=o?` due to: ${o}`:"",e(c)}};this.verifyEntityExistence=async({userId:e,entityHandles:s,entityIds:r,entityName:t,resourceName:i,resourceIdentifier:o,fetchByIdsFn:c,fetchByHandlesFn:u})=>{let a=[],y=await c(r),d=await u(s);if(y.forEach(n=>a.push(n)),d.forEach(n=>a.push(n)),a.length!==r.length+s.length){let n=[];r.forEach(h=>{a.find(p=>p.id===h)||n.push(h)}),s.forEach(h=>{a.find(p=>p.handle===h)||n.push(h)});let m=n.length===0?`${t} count does not match, this means there are duplicate ${t}s either on the user record or the resource definition, cowardly refusing to continue`:`non-existing ${t}(s) (${n.join()})`;throw this.logAbilityEvaluation({logFn:this.logFn,userId:e,wasAllowed:!1,resourceName:i,resourceIdentifier:o,reason:m}),new Error(m)}return{userEntities:y,appEntities:d}};this.evaluateAbilities=async(e,{roleHandles:s,permissionHandles:r,restrictionHandles:t,resourceName:i,resourceIdentifier:o})=>{if(this.checkSuperAdmin(e))return this.logAbilityEvaluation({logFn:this.logFn,userId:e.id,wasAllowed:!0,resourceName:i,resourceIdentifier:o,reason:"is super admin"}),!0;if(s.length+r.length+t.length<1)throw this.logAbilityEvaluation({logFn:this.logFn,userId:e.id,wasAllowed:!1,resourceName:i,resourceIdentifier:o,reason:"only super admin allowed"}),new Error("Unauthorized");let{id:c,roles:u,abilities:{permissions:a,restrictions:y}}=e,d,n,m,h,g,p;if(this.verifyRoleExists){let l=await this.verifyEntityExistence({userId:c,entityIds:u,entityHandles:s,entityName:"role",resourceName:i,resourceIdentifier:o,fetchByIdsFn:this.fetchRolesById,fetchByHandlesFn:this.fetchRolesByHandle});d=l.userEntities,h=l.appEntities}else d=await this.fetchRolesById(u),h=await this.fetchRolesByHandle(s);if(this.verifyAbilitiesExist){let l=await this.verifyEntityExistence({userId:c,entityIds:a,entityHandles:r,entityName:"permission",resourceName:i,resourceIdentifier:o,fetchByIdsFn:this.fetchPermissionsById,fetchByHandlesFn:this.fetchPermissionsByHandle});n=l.userEntities,g=l.appEntities;let f=await this.verifyEntityExistence({userId:c,entityIds:y,entityHandles:t,entityName:"restriction",resourceName:i,resourceIdentifier:o,fetchByIdsFn:this.fetchRestrictionsById,fetchByHandlesFn:this.fetchRestrictionsByHandle});m=f.userEntities,p=f.appEntities}else n=await this.fetchPermissionsById(a),m=await this.fetchRestrictionsById(y),g=await this.fetchPermissionsByHandle(r),p=await this.fetchRestrictionsByHandle(t);if(d.length+n.length<1)throw this.logAbilityEvaluation({logFn:this.logFn,userId:e.id,wasAllowed:!1,resourceName:i,resourceIdentifier:o,reason:"user has no permissions whatsoever"}),new Error("Unauthorized");let B=d.reduce((l,f)=>l||typeof h.find(L=>f.id===L.id)!="undefined"||f.abilities.permissions.reduce((L,P)=>L||typeof g.find(v=>P===v.id)!="undefined",!1),!1),b=n.reduce((l,f)=>l||typeof g.find(L=>f.id===L.id)!="undefined",!1),I=m.reduce((l,f)=>l&&!p.includes(f),!0);if((B||b)&&I)return this.logAbilityEvaluation({logFn:this.logFn,userId:e.id,wasAllowed:!0,resourceName:i,resourceIdentifier:o,reason:"user has the proper permissions and no restrictions"}),!0;throw this.logAbilityEvaluation({logFn:this.logFn,userId:e.id,wasAllowed:!1,resourceName:i,resourceIdentifier:o,reason:"non of the user permissions match resource requirements"}),new Error("Unauthorized")};this.superAdminId=e,this.fetchRolesById=s,this.fetchPermissionsById=r,this.fetchRestrictionsById=t,this.fetchRolesByHandle=i,this.fetchPermissionsByHandle=o,this.fetchRestrictionsByHandle=c,this.verifyRoleExists=u||this.verifyRoleExists,this.verifyAbilitiesExist=a||this.verifyAbilitiesExist,this.debug=Boolean(y),this.logFn=d,console.log("DoorLock initiated with options:",{superAdminId:this.superAdminId,fetchRolesById:this.fetchRolesById,fetchPermissionsById:this.fetchPermissionsById,fetchRestrictionsById:this.fetchRestrictionsById,fetchRolesByHandle:this.fetchRolesByHandle,fetchPermissionsByHandle:this.fetchPermissionsByHandle,fetchRestrictionsByHandle:this.fetchRestrictionsByHandle,verifyRoleExists:this.verifyRoleExists,verifyAbilitiesExist:this.verifyAbilitiesExist,debug:this.debug,logFn:d})}};D.version=E;var H=D;return F;})();
'undefined'!=typeof module&&(module.exports=Doorlock.default),'undefined'!=typeof window&&(Doorlock=Doorlock.default);